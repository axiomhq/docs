{
  "openapi": "3.0.0",
  "info": {
    "description": "A public and stable API for interacting with axiom services",
    "title": "Axiom",
    "termsOfService": "http://axiom.co/terms",
    "contact": {
      "name": "Axiom support team",
      "url": "https://axiom.co",
      "email": "hello@axiom.co"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.axiom.co/v2/"
    }
  ],
  "paths": {
    "/annotations": {
      "get": {
        "security": [
          {
            "Auth": [
              "annotations|read"
            ]
          }
        ],
        "description": "Get annotations",
        "tags": [
          "annotations"
        ],
        "operationId": "getAnnotations",
        "parameters": [
          {
            "description": "Optional: Filter for dataset names.",
            "name": "datasets",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Optional: Filter for events after this date. Use RFC3339 time format.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional: Filter for events before this date. Use RFC3339 time format.",
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Annotation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Auth": [
              "annotations|create"
            ]
          }
        ],
        "description": "Create annotation",
        "tags": [
          "annotations"
        ],
        "operationId": "createAnnotation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAnnotation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Annotation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            }
          }
        }
      }
    },
    "/annotations/{id}": {
      "get": {
        "security": [
          {
            "Auth": [
              "annotations|read"
            ]
          }
        ],
        "description": "Get annotation by ID",
        "tags": [
          "annotations"
        ],
        "operationId": "getAnnotation",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Auth": [
              "annotations|update"
            ]
          }
        ],
        "description": "Update annotation",
        "tags": [
          "annotations"
        ],
        "operationId": "updateAnnotation",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedAnnotation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Annotation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Auth": [
              "annotations|delete"
            ]
          }
        ],
        "description": "Delete annotation",
        "tags": [
          "annotations"
        ],
        "operationId": "deleteAnnotation",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/slack/auth": {
      "get": {
        "tags": [
          "Slack"
        ],
        "description": "Authenticate the user",
        "operationId": "handleSlackAuth",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "Slack state to authenticate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {}
          },
          "400": {
            "description": "Unsuccessful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ],
        "x-axiom-preview": true
      }
    },
    "/slack/auth/callback": {
      "get": {
        "tags": [
          "Slack"
        ],
        "description": "Handle OAuth callback from Slack",
        "operationId": "handleOAuthCallback",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "OAuth authorization code from Slack",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "OAuth state parameter for CSRF protection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {}
          },
          "303": {
            "description": "Redirect to login",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "400": {
            "description": "Invalid request or authentication failed",
            "content": {}
          }
        },
        "security": [],
        "x-axiom-preview": true
      }
    },
    "/slack/axiomLogin/callback": {
      "get": {
        "tags": [
          "Slack"
        ],
        "description": "Authenticate the user against Axiom",
        "operationId": "handleAxiomLogin",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "Slack state to authenticate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Login server code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Unsuccessful response",
            "content": {}
          }
        },
        "security": [],
        "x-axiom-preview": true
      }
    },
    "/slack/events": {
      "post": {
        "tags": [
          "Slack"
        ],
        "description": "Post Slack events",
        "operationId": "postSlackEvent",
        "parameters": [
          {
            "name": "X-Slack-Signature",
            "in": "header",
            "description": "Slack request signature for verifying the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Slack-Request-Timestamp",
            "in": "header",
            "description": "Slack request timestamp for verifying the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SlackEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event received",
            "content": {}
          },
          "400": {
            "description": "Invalid event data",
            "content": {}
          }
        },
        "security": [],
        "x-axiom-preview": true,
        "x-codegen-request-body-name": "event"
      }
    },
    "/slack/handleSlashCommand": {
      "post": {
        "tags": [
          "Slack"
        ],
        "description": "Redirect user to Slack for authentication",
        "operationId": "handleSlashCommand",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response_type": {
                      "type": "string"
                    },
                    "text": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [],
        "x-axiom-preview": true
      }
    },
    "/slack/interactiveEndpoint": {
      "post": {
        "tags": [
          "Slack"
        ],
        "description": "Post Slack interactive endpoint",
        "operationId": "postSlackInteractiveEndpoint",
        "responses": {
          "200": {
            "description": "Event received",
            "content": {}
          }
        },
        "security": [],
        "x-axiom-preview": true
      }
    },
    "/tokens": {
      "get": {
        "security": [
          {
            "Auth": [
              "apiTokens|read"
            ]
          }
        ],
        "description": "Get API tokens",
        "tags": [
          "tokens"
        ],
        "operationId": "getAPITokens",
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/APIToken"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Auth": [
              "apiTokens|create"
            ]
          }
        ],
        "description": "Create API token",
        "tags": [
          "tokens"
        ],
        "operationId": "createAPIToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAPIToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "CreateApiTokenResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAPITokenResponse"
                }
              }
            }
          }
        },
        "x-axiom-not-suspended": true
      }
    },
    "/tokens/{id}": {
      "get": {
        "security": [
          {
            "Auth": [
              "apiTokens|read"
            ]
          }
        ],
        "description": "Get API token by ID",
        "tags": [
          "tokens"
        ],
        "operationId": "getAPIToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIToken"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Auth": [
              "apiTokens|delete"
            ]
          }
        ],
        "description": "Delete API token",
        "tags": [
          "tokens"
        ],
        "operationId": "deleteAPIToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)"
          }
        }
      }
    },
    "/tokens/{id}/regenerate": {
      "post": {
        "security": [
          {
            "Auth": [
              "apiTokens|update"
            ]
          }
        ],
        "description": "Regenerate API token",
        "tags": [
          "tokens"
        ],
        "operationId": "regenerateAPIToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegenerateAPIToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CreateAPITokenResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAPITokenResponse"
                }
              }
            }
          }
        },
        "x-axiom-not-suspended": true
      }
    }
  },
  "components": {
    "parameters": {
      "Limit": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 1000,
          "default": 100
        }
      },
      "Offset": {
        "name": "offset",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "default": 0
        }
      },
      "id": {
        "description": "Unique ID of the annotation",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^ann_"
        }
      }
    },
    "responses": {
      "ForbiddenError": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "example": {
                "code": 401,
                "message": "Unauthorized"
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "example": {
                "code": 404,
                "message": "Not found"
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "Monitor": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Monitor"
            }
          }
        },
        "required": true
      },
      "Notifier": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Notifier"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "Auth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
            "tokenUrl": "https://www.googleapis.com/oauth2/v4/token",
            "scopes": {}
          }
        }
      },
      "Shared": {
        "type": "apiKey",
        "name": "tk",
        "in": "query"
      }
    },
    "schemas": {
      "APIToken": {
        "type": "object",
        "required": [
          "id",
          "name",
          "datasetCapabilities",
          "orgCapabilities"
        ],
        "properties": {
          "datasetCapabilities": {
            "$ref": "#/components/schemas/datasetCapabilities"
          },
          "description": {
            "description": "Description of the token",
            "type": "string"
          },
          "expiresAt": {
            "description": "Expiration date of the token (ISO 8601 format)",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "id": {
            "description": "ID of the token",
            "type": "string"
          },
          "name": {
            "description": "Name of the token",
            "type": "string"
          },
          "orgCapabilities": {
            "$ref": "#/components/schemas/orgCapabilities"
          }
        }
      },
      "AggInfo": {
        "description": "AggInfo captures information about an aggregation",
        "type": "object",
        "properties": {
          "args": {
            "description": "Args specifies any non-field arguments for the aggregation. Fx. [10] for topk(players, 10).",
            "type": "array",
            "items": {}
          },
          "fields": {
            "description": "Fields specifies the names of the fields this aggregation is computed on.\nFx [\"players\"] for topk(players, 10)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "Name is the system name of the aggregation, which is the string form of aggregation.Type.\nIf the aggregation is aliased, the alias is stored in the parent FieldInfo",
            "type": "string"
          }
        }
      },
      "AlertHistory": {
        "type": "object",
        "required": [
          "name",
          "checkId",
          "timestamp",
          "state"
        ],
        "properties": {
          "checkId": {
            "description": "ID of the check that triggered the alert.",
            "type": "string"
          },
          "name": {
            "description": "The name of the alert.",
            "type": "string"
          },
          "state": {
            "description": "State of the alert.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ]
          },
          "timestamp": {
            "description": "Timestamp of the transition into the current state.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Annotation": {
        "type": "object",
        "required": [
          "id",
          "time",
          "datasets",
          "type"
        ],
        "properties": {
          "datasets": {
            "description": "array<string> of dataset names for which the annotation appears on charts",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "description": {
            "description": "Explanation of the event the annotation marks on the charts",
            "type": "string",
            "maxLength": 512
          },
          "endTime": {
            "description": "End time of the annotation",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/AnnotationID"
          },
          "time": {
            "description": "Time the annotation marks on the charts. If you don't include this field, Axiom assigns the time of the API request to the annotation.",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "description": "Summary of the annotation that appears on the charts",
            "type": "string",
            "maxLength": 256
          },
          "type": {
            "description": "Type of the event marked by the annotation. Use only alphanumeric characters or hyphens. For example, \"production-deployment\".",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-z0-9-]+$"
          },
          "url": {
            "description": "URL relevant for the event marked by the annotation. For example, link to GitHub pull request.",
            "type": "string",
            "maxLength": 512
          }
        },
        "example": {
          "datasets": [
            "my-dataset"
          ],
          "description": "Deploy new feature to the sales form",
          "endTime": "2024-02-06T11:39:28.382Z",
          "id": "ann_123",
          "time": "2024-02-06T10:39:28.382Z",
          "title": "Production deployment",
          "type": "deploy",
          "url": "https://example.com"
        }
      },
      "AnnotationID": {
        "type": "string",
        "x-go-type": {
          "import": {
            "package": "github.com/axiomhq/axiom/pkg/core/ids"
          },
          "type": "AnnotationID"
        }
      },
      "AplDeletionRequest": {
        "type": "object",
        "required": [
          "apl",
          "commit"
        ],
        "properties": {
          "Modules": {
            "description": "Modules is an optional set of module names => module sources that will be available to this query",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "apl": {
            "type": "string"
          },
          "commit": {
            "type": "boolean"
          },
          "endTime": {
            "type": "string"
          },
          "startTime": {
            "description": "start and end time for the query, these must be specified as RFC3339 strings\nor using relative time expressions (e.g. now-1h, now-1d, now-1w, etc)",
            "type": "string"
          },
          "variables": {
            "description": "Variables is an optional set of additional variables that are inserted into the APL",
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "AplDeletionResponse": {
        "type": "object",
        "required": [
          "rowsMatched",
          "rowsDeleted"
        ],
        "properties": {
          "blocksMatched": {
            "type": "integer",
            "format": "uint64"
          },
          "dryRun": {
            "type": "boolean"
          },
          "firstMatchedEvent": {
            "description": "these are timestamps",
            "type": "string"
          },
          "lastMatchedEvent": {
            "type": "string"
          },
          "rowsDeleted": {
            "type": "integer",
            "format": "uint64"
          },
          "rowsMatched": {
            "type": "integer",
            "format": "uint64"
          }
        }
      },
      "AplQueryError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Status is the http status code associated with this error",
            "type": "integer"
          },
          "detail": {
            "$ref": "#/components/schemas/AplQueryErrorDetail"
          },
          "message": {
            "description": "a formatted user-facing error message",
            "type": "string"
          }
        }
      },
      "AplQueryErrorDetail": {
        "type": "object",
        "properties": {
          "column": {
            "description": "Column is the column associated with this compile type error",
            "type": "integer",
            "format": "int64"
          },
          "compileErrorCode": {
            "description": "CompileErrorCode is a special error code that is only available for Compile Errors\nIt is an integer value that can be used to identify the error",
            "type": "integer",
            "format": "int64",
            "enum": [
              1,
              2,
              16,
              17,
              32,
              33,
              34
            ]
          },
          "errorType": {
            "description": "Error Type is an integer value indicating the kind of error",
            "type": "integer",
            "format": "int64",
            "enum": [
              1,
              2,
              3,
              4
            ]
          },
          "line": {
            "description": "Line is the line associated with this compile type error",
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "description": "Message is the raw error message without any formatting",
            "type": "string"
          }
        }
      },
      "AplRequest": {
        "type": "object",
        "required": [
          "apl"
        ],
        "properties": {
          "apl": {
            "type": "string"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "AplResult": {
        "type": "object",
        "required": [
          "status",
          "tables"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "tables": {
            "description": "Tables hold the result data for a query",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        }
      },
      "BucketInfo": {
        "description": "The standard mode of operation for Kirby is to create buckets on the _time column,",
        "type": "object",
        "title": "BucketInfo captures information about how a grouped query is sorted into buckets.",
        "properties": {
          "field": {
            "description": "Field specifies the field used to create buckets on. Normally this would be _time.",
            "type": "string"
          },
          "size": {
            "description": "An integer or float representing the fixed bucket size.\nWhen the bucket field is _time this value is in nanoseconds."
          }
        }
      },
      "CreateAPIToken": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "datasetCapabilities": {
            "$ref": "#/components/schemas/datasetCapabilities"
          },
          "description": {
            "description": "Description of the token",
            "type": "string"
          },
          "expiresAt": {
            "description": "Expiration date of the token (ISO 8601 format)",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "description": "Name of the token",
            "type": "string"
          },
          "orgCapabilities": {
            "$ref": "#/components/schemas/orgCapabilities"
          }
        }
      },
      "CreateAPITokenResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/APIToken"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "x-go-name": "Value"
              }
            }
          }
        ]
      },
      "CreateDataset": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "description": "Dataset description",
            "type": "string",
            "default": ""
          },
          "name": {
            "description": "Dataset unique name",
            "type": "string"
          }
        },
        "example": {
          "description": "string",
          "name": "string"
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "role"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "CustomNotifierConfig": {
        "type": "object",
        "required": [
          "url",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Dataset": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "created",
          "who"
        ],
        "properties": {
          "created": {
            "description": "The RFC3339-formatted time when the dataset was created.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Dataset description",
            "type": "string"
          },
          "id": {
            "description": "Dataset ID",
            "type": "string"
          },
          "name": {
            "description": "Unique dataset name",
            "type": "string"
          },
          "who": {
            "description": "Name of the dataset creator",
            "type": "string"
          }
        },
        "example": {
          "created": "2022-07-20T02:35:14.137Z",
          "description": "string",
          "id": "string",
          "name": "string",
          "who": "string"
        }
      },
      "DiscordConfig": {
        "properties": {
          "discordChannel": {
            "type": "string"
          },
          "discordToken": {
            "type": "string"
          }
        }
      },
      "DiscordWebhookConfig": {
        "properties": {
          "discordWebhookUrl": {
            "type": "string"
          }
        }
      },
      "EmailConfig": {
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FieldInfo": {
        "type": "object",
        "title": "FieldInfo captures information about a field used in the tabular result format. See Table.",
        "properties": {
          "agg": {
            "$ref": "#/components/schemas/AggInfo"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GroupInfo": {
        "type": "object",
        "title": "GroupInfo captures information about a grouping clause in the tabular result format. See Table.",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "priority",
          "count",
          "message",
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "enum": [
              "trace",
              "debug",
              "info",
              "warn",
              "error",
              "fatal"
            ]
          }
        }
      },
      "MicrosoftTeamsConfig": {
        "properties": {
          "microsoftTeamsUrl": {
            "type": "string"
          }
        }
      },
      "Monitor": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "alertOnNoData": {
            "type": "boolean"
          },
          "aplQuery": {
            "type": "string"
          },
          "columnName": {
            "type": "string"
          },
          "compareDays": {
            "type": "number",
            "format": "int64",
            "maximum": 7
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabledUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "intervalMinutes": {
            "type": "integer",
            "format": "int64",
            "minimum": 1
          },
          "name": {
            "type": "string"
          },
          "notifierIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notifyByGroup": {
            "type": "boolean"
          },
          "operator": {
            "type": "string",
            "enum": [
              "Below",
              "BelowOrEqual",
              "Above",
              "AboveOrEqual",
              "AboveOrBelow"
            ]
          },
          "rangeMinutes": {
            "type": "integer",
            "format": "int64",
            "minimum": 1
          },
          "resolvable": {
            "type": "boolean"
          },
          "secondDelay": {
            "type": "number",
            "format": "int64",
            "maximum": 86400
          },
          "threshold": {
            "type": "number",
            "format": "double",
            "x-omitempty": false
          },
          "tolerance": {
            "type": "number",
            "maximum": 100
          },
          "triggerAfterNPositiveResults": {
            "type": "number",
            "format": "int64"
          },
          "triggerFromNRuns": {
            "type": "number",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "Threshold",
              "MatchEvent",
              "AnomalyDetection"
            ]
          }
        }
      },
      "NewAnnotation": {
        "type": "object",
        "required": [
          "datasets",
          "type"
        ],
        "properties": {
          "datasets": {
            "description": "array<string> of dataset names for which the annotation appears on charts",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "description": "Explanation of the event the annotation marks on the charts",
            "type": "string",
            "maxLength": 512
          },
          "endTime": {
            "description": "End time of the annotation",
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "description": "Time the annotation marks on the charts. If you don't include this field, Axiom assigns the time of the API request to the annotation.",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "description": "Summary of the annotation that appears on the charts",
            "type": "string",
            "maxLength": 256
          },
          "type": {
            "description": "Type of the event marked by the annotation. Use only alphanumeric characters or hyphens. For example, \"production-deployment\".",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-z0-9-]+$"
          },
          "url": {
            "description": "URL relevant for the event marked by the annotation. For example, link to GitHub pull request.",
            "type": "string",
            "maxLength": 512
          }
        }
      },
      "Notifier": {
        "type": "object",
        "required": [
          "name",
          "properties"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "readOnly": true
          },
          "disabledUntil": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/NotifierProperties"
          }
        }
      },
      "NotifierProperties": {
        "properties": {
          "customWebhook": {
            "$ref": "#/components/schemas/CustomNotifierConfig"
          },
          "discord": {
            "$ref": "#/components/schemas/DiscordConfig"
          },
          "discordWebhook": {
            "$ref": "#/components/schemas/DiscordWebhookConfig"
          },
          "email": {
            "$ref": "#/components/schemas/EmailConfig"
          },
          "microsoftTeams": {
            "$ref": "#/components/schemas/MicrosoftTeamsConfig"
          },
          "opsgenie": {
            "$ref": "#/components/schemas/OpsGenieConfig"
          },
          "pagerduty": {
            "$ref": "#/components/schemas/PagerDutyConfig"
          },
          "slack": {
            "$ref": "#/components/schemas/SlackConfig"
          },
          "webhook": {
            "$ref": "#/components/schemas/WebhookConfig"
          }
        }
      },
      "OpsGenieConfig": {
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "isEU": {
            "type": "boolean"
          }
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "field",
          "desc"
        ],
        "properties": {
          "desc": {
            "type": "boolean"
          },
          "field": {
            "type": "string"
          }
        }
      },
      "PagerDutyConfig": {
        "properties": {
          "routingKey": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RangeInfo": {
        "type": "object",
        "title": "RangeInfo specifies the window a query was restricted to.",
        "properties": {
          "end": {
            "description": "End is the ending time the query is limited by.\nQueries are restricted to the interval (start,end).",
            "type": "string",
            "format": "date-time"
          },
          "field": {
            "description": "Field specifies the field name on which the query range was restricted. Normally _time",
            "type": "string"
          },
          "start": {
            "description": "Start is the starting time the query is limited by.\nQueries are restricted to the interval (start,end).",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RegenerateAPIToken": {
        "type": "object",
        "required": [
          "existingTokenExpiresAt"
        ],
        "properties": {
          "existingTokenExpiresAt": {
            "description": "Expiration date of the existing token (ISO 8601 format)",
            "type": "string",
            "format": "date-time"
          },
          "newTokenExpiresAt": {
            "description": "Expiration date of the new token (ISO 8601 format)",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SlackConfig": {
        "properties": {
          "slackUrl": {
            "type": "string"
          }
        }
      },
      "SlackEvent": {
        "type": "object",
        "required": [
          "token",
          "team_id",
          "api_app_id",
          "event",
          "type",
          "event_id",
          "event_time"
        ],
        "properties": {
          "api_app_id": {
            "description": "ID of the Slack app that the event is for",
            "type": "string"
          },
          "event": {
            "type": "object",
            "required": [
              "type",
              "user",
              "ts",
              "channel"
            ],
            "properties": {
              "channel": {
                "description": "Channel ID where the event occurred",
                "type": "string"
              },
              "text": {
                "description": "Text content of the event",
                "type": "string"
              },
              "ts": {
                "description": "Timestamp of when the event occurred",
                "type": "string"
              },
              "type": {
                "description": "Type of the event",
                "type": "string"
              },
              "user": {
                "description": "ID of the user who triggered the event",
                "type": "string"
              }
            }
          },
          "event_id": {
            "description": "Unique identifier for the event",
            "type": "string"
          },
          "event_time": {
            "description": "Timestamp of when the event was dispatched",
            "type": "integer",
            "format": "int64"
          },
          "team_id": {
            "description": "ID of the team where the event originated",
            "type": "string"
          },
          "token": {
            "description": "Verification token to validate the event is from Slack",
            "type": "string"
          },
          "type": {
            "description": "Type of the event callback",
            "type": "string"
          }
        }
      },
      "SourceInfo": {
        "description": "Result sources will typically be the names of a datasets that were searched,\nbut may be expanded to other things in the future.",
        "type": "object",
        "title": "SourceInfo specifies the provenance of a results Table.",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Status": {
        "type": "object",
        "required": [
          "elapsedTimeNs",
          "isCached",
          "isEstimated",
          "rowsExamined",
          "rowsMatched"
        ],
        "properties": {
          "elapsedTimeNs": {
            "type": "integer",
            "format": "int64"
          },
          "isCached": {
            "type": "boolean"
          },
          "isEstimated": {
            "type": "boolean"
          },
          "maxCursor": {
            "description": "Row id of the newest row, as seen server side.\nMay be higher than what the results include if the server scanned more data than included in the results.\nCan be used to efficiently resume time-sorted non-aggregating queries (ie filtering only).",
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "minCursor": {
            "description": "Row id of the oldest row, as seen server side.\nMay be lower than what the results include if the server scanned more data than included in the results.\nCan be used to efficiently resume time-sorted non-aggregating queries (ie filtering only).",
            "type": "string"
          },
          "rowsExamined": {
            "type": "integer",
            "format": "uint64"
          },
          "rowsMatched": {
            "type": "integer",
            "format": "uint64"
          }
        }
      },
      "Table": {
        "type": "object",
        "title": "Table defines the schema for query results.",
        "properties": {
          "buckets": {
            "$ref": "#/components/schemas/BucketInfo"
          },
          "columns": {
            "description": "Columns contain a series of arrays with the raw result data.\nThe columns here line up with the fields in the Fields array.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {}
            }
          },
          "fields": {
            "description": "Fields contain information about the fields included in these results.\nThe order of the fields match up with the order of the data in Columns.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "groups": {
            "description": "Groups specifies which grouping operations has been performed on the results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupInfo"
            }
          },
          "name": {
            "description": "Name is the name assigned to this table. Defaults to \"0\". The name \"_totals\" is reserved for system use.",
            "type": "string"
          },
          "order": {
            "description": "Order echoes the ordering clauses that was used to sort the results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "range": {
            "$ref": "#/components/schemas/RangeInfo"
          },
          "sources": {
            "description": "Sources contain the names of the datasets that contributed data to these results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceInfo"
            }
          }
        }
      },
      "TrimOptions": {
        "type": "object",
        "required": [
          "maxDuration"
        ],
        "properties": {
          "maxDuration": {
            "type": "string",
            "example": "1h"
          }
        },
        "example": {
          "maxDuration": "1h"
        }
      },
      "UpdateDataset": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "example": {
          "description": "string"
        }
      },
      "UpdatedAnnotation": {
        "type": "object",
        "properties": {
          "datasets": {
            "description": "array<string> of dataset names for which the annotation appears on charts",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "description": {
            "description": "Explanation of the event the annotation marks on the charts",
            "type": "string",
            "maxLength": 512
          },
          "endTime": {
            "description": "End time of the annotation",
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "description": "Time the annotation marks on the charts. If you don't include this field, Axiom assigns the time of the API request to the annotation.",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "description": "Summary of the annotation that appears on the charts",
            "type": "string",
            "maxLength": 256
          },
          "type": {
            "description": "Type of the event marked by the annotation. Use only alphanumeric characters or hyphens. For example, \"production-deployment\".",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-z0-9-]+$"
          },
          "url": {
            "description": "URL relevant for the event marked by the annotation. For example, link to GitHub pull request.",
            "type": "string",
            "maxLength": 512
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "role"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserDetailsRole"
          }
        }
      },
      "UserDetailsRole": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserRole": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "WebhookConfig": {
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "datasetCapabilities": {
        "type": "object",
        "additionalProperties": {
          "properties": {
            "data": {
              "description": "Data Management capability",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "delete"
                ]
              },
              "x-omitempty": true
            },
            "ingest": {
              "description": "Ingest capability",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "create"
                ]
              },
              "x-omitempty": true
            },
            "query": {
              "description": "Query capability",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "read"
                ]
              },
              "x-omitempty": true
            },
            "starredQueries": {
              "description": "Starred queries capability",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "create",
                  "read",
                  "update",
                  "delete"
                ]
              },
              "x-omitempty": true
            },
            "trim": {
              "description": "Data Trimming capability",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "update"
                ]
              },
              "x-omitempty": true
            },
            "vacuum": {
              "description": "Field Vacuuming capability",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "update"
                ]
              },
              "x-omitempty": true
            },
            "virtualFields": {
              "description": "Virtual fields capability",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "create",
                  "read",
                  "update",
                  "delete"
                ]
              },
              "x-omitempty": true
            }
          }
        }
      },
      "orgCapabilities": {
        "type": "object",
        "properties": {
          "annotations": {
            "description": "Annotations capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "apiTokens": {
            "description": "API tokens capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "auditLog": {
            "description": "Audit Log capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "read"
              ]
            },
            "x-omitempty": true
          },
          "billing": {
            "description": "Billing capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "read",
                "update"
              ]
            },
            "x-omitempty": true
          },
          "dashboards": {
            "description": "Dashboards capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "datasets": {
            "description": "Datasets capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "endpoints": {
            "description": "Endpoints capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "flows": {
            "description": "Flows capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "integrations": {
            "description": "Integrations capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "monitors": {
            "description": "Monitors capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "notifiers": {
            "description": "Notifiers capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "rbac": {
            "description": "Access control capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          },
          "sharedAccessKeys": {
            "description": "Shared access keys capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "read",
                "update"
              ]
            },
            "x-omitempty": true
          },
          "users": {
            "description": "Users capability",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "read",
                "update",
                "delete"
              ]
            },
            "x-omitempty": true
          }
        }
      }
    }
  }
}
